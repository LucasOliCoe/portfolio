# -*- coding: utf-8 -*-
"""Precificacao-inteligente.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SadwyCkQh3fRSGlq1z0ZiPnYgn6jXvFd
"""

import pandas as pd

#Vamos ler os dados dos moveis disponiveis

moveis_disponiveis = pd.read_json('https://caelum-online-public.s3.amazonaws.com/2928-transformacao-manipulacao-dados/moveis_disponiveis.json')
moveis_disponiveis.head()

#Vamos ler os dados das hospedagens

dados_hospedagem = pd.read_json('https://caelum-online-public.s3.amazonaws.com/2928-transformacao-manipulacao-dados/dados_hospedagem.json')
dados_hospedagem.head()

#Observamos que os dados do dataframe 'dados_hospedagem' estão como dicionario, e precisamos normalizar eles. Podemos usar a função json_normalize

dados_hospedagem = pd.json_normalize(dados_hospedagem['info_moveis'])
dados_hospedagem.head()

"""# **DESAFIO**"""

#Precisamos ler duas bases de dados json e normalizar suas colunas usando o comando json.normalize()

dados_locacao_imoveis = pd.read_json('https://caelum-online-public.s3.amazonaws.com/2928-transformacao-manipulacao-dados/dados_locacao_imoveis.json')
dados_locacao_imoveis.head()

dados_vendas_clientes = pd.read_json('https://caelum-online-public.s3.amazonaws.com/2928-transformacao-manipulacao-dados/dados_vendas_clientes.json')
dados_vendas_clientes.head()

#Podemos perceber que os dados estão dentro de dicionarios
#Vamos normalizar as colunas

dados_locacao_imoveis = pd.json_normalize(dados_locacao_imoveis['dados_locacao'])
dados_locacao_imoveis.head()

dados_vendas_clientes = pd.json_normalize(dados_vendas_clientes['dados_vendas'])
dados_vendas_clientes.head()

"""#**-------------------------**"""

dados_hospedagem

#Percebe-se que varias linhas do nosso dataframe estão agrupadas, precisamos desagrupas as linhas e transformar em novas linhas

colunas = list(dados_hospedagem.columns)
colunas

#Ao observarmos o dataframe apenas a partir da terceira coluna que precisamos desgrupar.
#Vamos usar a função .explode() para desagrupar as linhas

dados_hospedagem = dados_hospedagem.explode(colunas[3:])
dados_hospedagem

#Ao observar o novo dataframe, percebe-se que o indice está enumerado de forma errada
#Vamos resetar o indice

dados_hospedagem.reset_index(inplace=True, drop=True)
dados_hospedagem.head()

#Ao analisar o novo dataframe, podemos ver que existem diversos elementos diferentes. Vamos usar a função .info() para saber os tipos dos elementos do dataframe

dados_hospedagem.info()

#Ao olharmos a coluna Dtype, percebemos que os elementos das colunas são object, isso significa que os elementos são de diversos tipos
#Portanto, precisamos transformar os tipos dos dados para conseguirmos fazer calculos e tirar conclusões

import  numpy as np

#Vamos transformar os dados da coluna 'max_hospedes' em numeros inteiros

dados_hospedagem['max_hospedes'] = dados_hospedagem['max_hospedes'].astype(np.int64)
dados_hospedagem.info()

#Além dessa coluna, temos outras 3 colunas que podemos transformar os elementos em numeros inteiros

colunas_numericas = ['quantidade_banheiros', 'quantidade_quartos', 'quantidade_camas']
dados_hospedagem[colunas_numericas] = dados_hospedagem[colunas_numericas].astype(np.int64)
dados_hospedagem.info()

#Percebemos que existe uma coluna que pode ser transformada em float64. Vamos transformar

dados_hospedagem['avaliacao_geral'] = dados_hospedagem['avaliacao_geral'].astype(np.float64)
dados_hospedagem.info()

#Ainda temos colunas com elementos que podem ser float, que são as colunas de preço,
#porém são elementos que possuem o cifrão. Precisamos tirar o cifrão para transformar em float

dados_hospedagem['preco'].apply(lambda x: x.replace('$','').replace(',','').strip())

dados_hospedagem['preco'] = dados_hospedagem['preco'].apply(lambda x: x.replace('$','').replace(',','').strip())

#Depois de limpar os elementos da coluna preco, agora sim podemos transformar os dados em float64

dados_hospedagem['preco'] = dados_hospedagem['preco'].astype(np.float64)
dados_hospedagem.info()

#Agora vamos converter duas colunas de uma vez.

dados_hospedagem[['taxa_deposito', 'taxa_limpeza']] = dados_hospedagem[['taxa_deposito', 'taxa_limpeza']].applymap(lambda x: x.replace('$','').replace(',','').strip())

#Depois de limpar os cifrões e vírgulas da coluna, vamos transforma-la em float

dados_hospedagem[['taxa_deposito', 'taxa_limpeza']] = dados_hospedagem[['taxa_deposito', 'taxa_limpeza']].astype(np.float64)
dados_hospedagem.info()

"""# **DESAFIO**"""

#1)Remover os dados em listas dentro do DataFrame;

dados_vendas_clientes

colunas_vendas = list(dados_vendas_clientes.columns)
colunas_vendas

dados_vendas_clientes = dados_vendas_clientes.explode(colunas_vendas[1:])

dados_vendas_clientes

dados_vendas_clientes = dados_vendas_clientes.reset_index(drop=True)

dados_vendas_clientes

#2)Verificar os tipos de dados;

dados_vendas_clientes.info()

dados_vendas_clientes

#3) Identificar colunas numéricas;

#A coluna numérica é a coluna 'Valor da compra'

#4) Transformar a coluna numérica para o tipo numérico.

dados_vendas_clientes['Valor da compra'] = dados_vendas_clientes['Valor da compra'].apply(lambda x: x.replace('R$ ', '').replace(',','.').strip())
#Alterar os tipo de dado para float
dados_vendas_clientes['Valor da compra'] = dados_vendas_clientes['Valor da compra'].astype(np.float64)
dados_vendas_clientes.info()

dados_vendas_clientes

#Agora vamos fazer o mesmo com a outra base de dados

dados_locacao_imoveis

#1)Remover os dados em listas dentro do DataFrame;

#Primeiro precisamos saber quais são as colunas do dataframe

colunas_locacao = list(dados_locacao_imoveis.columns)
colunas_locacao

#Agora vamos aplicar a função explode para desagrupar as colunas de listas

dados_locacao_imoveis = dados_locacao_imoveis.explode(colunas_locacao[1:])

#Agora que estão desagrupados, percebe-se que o indice está incorreto. Vamos resetar o indice

dados_locacao_imoveis = dados_locacao_imoveis.reset_index(drop=True)

#2) Verificar os tipos de dados;

dados_locacao_imoveis.info()

#3) Identificar colunas numéricas;

dados_locacao_imoveis.head()

#A coluna numerica é a coluna 'valor_aluguel'

#4) Transformar a coluna numérica para o tipo numérico.

#Primeiro precisamos limpar os elementos da coluna para transforma-los

dados_locacao_imoveis['valor_aluguel'].apply(lambda x: x.replace('$','').replace(',','.').replace('reais','').strip())

dados_locacao_imoveis['valor_aluguel'] = dados_locacao_imoveis['valor_aluguel'].apply(lambda x: x.replace('$','').replace(',','.').replace('reais','').strip())

#Depois de limpar a coluna, podemos transformar a coluna em numerica

dados_locacao_imoveis['valor_aluguel'] = dados_locacao_imoveis['valor_aluguel'].astype(np.float64)

dados_locacao_imoveis.info()

dados_locacao_imoveis

"""# **----------------------------------------**"""

#Vamos manipular os dados textuais

dados_hospedagem['descricao_local']

#Podemos perceber que são frases. Vamos transformar os elementos em string e deixar as letras maiusculas em minusculas

dados_hospedagem['descricao_local'] = dados_hospedagem['descricao_local'].str.lower()

dados_hospedagem.head()

#Vamos limpar os dados da coluna 'descricao_local' tirando os caracteres que não desejamos mais

dados_hospedagem['descricao_local'] = dados_hospedagem['descricao_local'].str.replace('[^a-zA-Z0-9\-\']',' ', regex=True)

dados_hospedagem['descricao_local']

#Agora vamos remover os hífens que estão soltos, ou seja, não acompanham nenhuma palavra composta

dados_hospedagem['descricao_local'] = dados_hospedagem['descricao_local'].str.replace('(?!<\w)-(?!<\w)','', regex=True)
dados_hospedagem['descricao_local']

#Agora vamos tokeinizar os elementos da coluna 'descricao_local'

dados_hospedagem['descricao_local'] = dados_hospedagem['descricao_local'].str.split()

#Agora vamos partir para limpar a coluna de 'comodidades'

dados_hospedagem['comodidades'] = dados_hospedagem['comodidades'].str.replace('\{|}|\"', ' ', regex=True)

dados_hospedagem['comodidades'] = dados_hospedagem['comodidades'].str.split(',')
dados_hospedagem.head()

"""# **DESAFIO**"""

#Nessa atividade, proponho que você faça o processo de tokenização para a coluna descricao_vizinhanca presente no conjunto de dados

dados_hospedagem['descricao_vizinhanca']

dados_hospedagem['descricao_vizinhanca'] = dados_hospedagem['descricao_vizinhanca'].str.lower()

dados_hospedagem['descricao_vizinhanca'] = dados_hospedagem['descricao_vizinhanca'].str.replace('[^a-zA-Z0-9\-\']',' ', regex=True)

dados_hospedagem['descricao_vizinhanca'] = dados_hospedagem['descricao_vizinhanca'].str.replace('(?!<\w)-(?!<\w)','', regex=True)
dados_hospedagem['descricao_vizinhanca']

dados_hospedagem['descricao_vizinhanca'] = dados_hospedagem['descricao_vizinhanca'].str.split()

"""# **----------------------------------------------**

# **DESAFIO**
"""

dados_vendas_clientes

#manipule os textos presentes na coluna Cliente para que seja obtido como resultado
#os nomes dos clientes em letras minúsculas, com a ausência de caracteres especiais ou números.

#Primeiro vamos deixar todas as letras minusculo

dados_vendas_clientes['Cliente'] = dados_vendas_clientes['Cliente'].str.lower()
dados_vendas_clientes['Cliente']

dados_vendas_clientes['Cliente'] = dados_vendas_clientes['Cliente'].str.replace('[^a-zA-Z]',' ', regex=True)
dados_vendas_clientes['Cliente']

dados_vendas_clientes

#Manipule os textos na coluna apartamento para remover o texto (blocoAP) do DataFrame.

dados_locacao_imoveis

dados_locacao_imoveis['apartamento']

dados_locacao_imoveis['apartamento'] = dados_locacao_imoveis['apartamento'].str.replace('\(blocoAP\)','', regex=True)

dados_locacao_imoveis

"""# **-----------------------------------**"""

#Agora vamos trabalhar com dados temporais do dataframe 'moveis_disponiveis'

moveis_disponiveis.head()

#Precisamos verificar o tipo dos nossos dados

moveis_disponiveis.info()

#Selecionando a coluna que desejamos alterar, aplicamos o comando .to_datetime(), e alteramos o tipo dos elementos para dados tmeporais (datetime64)

moveis_disponiveis['data'] = pd.to_datetime(moveis_disponiveis['data'])

moveis_disponiveis.info()

#Agora vamos descobrir quantas vagas disponiveis tem por cada mes

vagas_por_mes = moveis_disponiveis.groupby(moveis_disponiveis['data'].dt.strftime('%Y-%m'))['vaga_disponivel'].sum()
vagas_por_mes

"""# **DESAFIO**"""

#Preciso tratar os dados da coluna 'preco' do dataframe 'moveis_disponiveis'

moveis_disponiveis.head()

moveis_disponiveis.info()

moveis_disponiveis

#Primeiro vamos substituir os valores vazior por '0.0'

moveis_disponiveis['preco'] = moveis_disponiveis['preco'].fillna('0.0')

#Segundo vamos remover os '$' dos elementos

moveis_disponiveis['preco'] = moveis_disponiveis['preco'].apply(lambda x: x.replace('$', '').replace(',',''))

moveis_disponiveis

#Por fim, vamos transformar a coluna em float64

moveis_disponiveis['preco'] = moveis_disponiveis['preco'].astype(np.float64)

"""# **DESAFIO**"""

dados_vendas_clientes

#Precisamos transformar a coluna 'Data de venda' para dados temporais

dados_vendas_clientes['Data de venda'] = pd.to_datetime(dados_vendas_clientes['Data de venda'])

dados_vendas_clientes.info()

#Precisamos saber os clientes que mais compraram

dados_vendas_clientes.groupby(['Cliente'])['Valor da compra'].sum()

